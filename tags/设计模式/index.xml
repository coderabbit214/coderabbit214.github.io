<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>设计模式 - Tag - 第二大脑</title>
        <link>http://example.org/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
        <description>设计模式 - Tag - 第二大脑</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1157237955@qq.com (coderabbit)</managingEditor>
            <webMaster>1157237955@qq.com (coderabbit)</webMaster><lastBuildDate>Fri, 11 Mar 2022 11:24:36 &#43;0800</lastBuildDate><atom:link href="http://example.org/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>使用策略模式实现阿里云OSS和MINIO后端签名前端直传</title>
    <link>http://example.org/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E9%98%BF%E9%87%8C%E4%BA%91oss%E5%92%8Cminio%E5%90%8E%E7%AB%AF%E7%AD%BE%E5%90%8D%E5%89%8D%E7%AB%AF%E7%9B%B4%E4%BC%A0/</link>
    <pubDate>Fri, 11 Mar 2022 11:24:36 &#43;0800</pubDate>
    <author>coderabbit</author>
    <guid>http://example.org/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E9%98%BF%E9%87%8C%E4%BA%91oss%E5%92%8Cminio%E5%90%8E%E7%AB%AF%E7%AD%BE%E5%90%8D%E5%89%8D%E7%AB%AF%E7%9B%B4%E4%BC%A0/</guid>
    <description><![CDATA[使用策略模式实现阿里云OSS和MINIO后端签名前端直传 需求 无缝(通过配置，不改代码)切换外网模式和内网模式(阿里云和MINIO) 文件前端直]]></description>
</item>
<item>
    <title>设计模式-享元模式</title>
    <link>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 17 Jan 2021 11:24:36 &#43;0800</pubDate>
    <author>coderabbit</author>
    <guid>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[设计模式-享元模式 运用共享技术来有效地支持大量细粒度对象的复用 享元模式的结构与实现 享元模式的定义提出了两个要求，细粒度和共享对象。因为要求细]]></description>
</item>
<item>
    <title>设计模式-简单工厂</title>
    <link>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/</link>
    <pubDate>Sun, 17 Jan 2021 11:24:36 &#43;0800</pubDate>
    <author>coderabbit</author>
    <guid>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/</guid>
    <description><![CDATA[随笔-设计模式-简单工厂 学习标准规范类 1 2 3 4 5 package org.jsh.newinstance; public interface ICourse { void learn(); } 学习html类 1 2 3 4 5 6 7 8 package org.jsh.newinstance; public class HtmlCourse implements ICourse{ @Override public void learn() { System.out.println(&#34;html&#34;); } } 学习Java类]]></description>
</item>
<item>
    <title>设计模式-外观模式</title>
    <link>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Thu, 07 Jan 2021 11:24:36 &#43;0800</pubDate>
    <author>coderabbit</author>
    <guid>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[设计模式-外观模式 外观模式是为了解决类与类之家的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，而外观模式就是将他们]]></description>
</item>
<item>
    <title>设计模式-组合模式</title>
    <link>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Thu, 07 Jan 2021 11:24:36 &#43;0800</pubDate>
    <author>coderabbit</author>
    <guid>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[设计模式-组合模式 将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树 代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26]]></description>
</item>
<item>
    <title>设计模式-代理模式</title>
    <link>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 06 Jan 2021 11:24:36 &#43;0800</pubDate>
    <author>coderabbit</author>
    <guid>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[设计模式-代理模式 代理模式就是多一个代理类出来，替原对象进行一些操作 代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]]></description>
</item>
<item>
    <title>设计模式-桥接模式</title>
    <link>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 06 Jan 2021 11:24:36 &#43;0800</pubDate>
    <author>coderabbit</author>
    <guid>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[设计模式-桥接模式 处理多层继承结构，处理多维度变化的场景，将各个维度设计成独立的继承结构，使各个维度可以独立的扩展在抽象层建立关联。 问题 解决]]></description>
</item>
<item>
    <title>设计模式-装饰模式</title>
    <link>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 06 Jan 2021 11:24:36 &#43;0800</pubDate>
    <author>coderabbit</author>
    <guid>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[设计模式-装饰模式 装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例]]></description>
</item>
<item>
    <title>设计模式-适配器模式</title>
    <link>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 06 Jan 2021 11:24:36 &#43;0800</pubDate>
    <author>coderabbit</author>
    <guid>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[设计模式-适配器模式 把一个接口转换成用户希望的另一个接口，使的原本不兼容而不能一起工作的类可以一起工作。 何时使用 系统需要使用现有的类，而此类]]></description>
</item>
<item>
    <title>设计模式-单例模式</title>
    <link>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Tue, 05 Jan 2021 11:24:36 &#43;0800</pubDate>
    <author>coderabbit</author>
    <guid>http://example.org/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[设计模式-单例模式 java中单例模式是一种常见的设计模式，单例模式的写法有好几种，这里主要介绍三种：懒汉式单例、饿汉式单例、登记式单例。 单例]]></description>
</item>
</channel>
</rss>
